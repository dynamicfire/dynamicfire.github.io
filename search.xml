<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>原码一位除法</title>
      <link href="/2018/division-signed/"/>
      <url>/2018/division-signed/</url>
      <content type="html"><![CDATA[<p><em>本文简述了计算机中的原码一位除法。文中没有涉及到高深的数学知识。</em></p><p>由原码表示的两个数相除时，商的符号由两数的符号<em>按位相加</em>求得，商的数值部分由两数的<em>数值部分相除</em>求得。</p><p>在定点计算机系统中，设有n位定点小数(定点整数也行)，被除数<script type="math/tex">[x]_{原}=x_{s}.x_{1}x_{2}\dots x_{n}</script>，除数<script type="math/tex">[y]_{原}=y_{s}.y_{1}y_{2}\dots y_{n}</script>。</p><p>两个原码相除<script type="math/tex">x\div y = z</script>的运算规则如下：<br>商<script type="math/tex">z=\frac{x}{y}</script>，其原码为<script type="math/tex">[z]_{原}=(x_{s}\oplus y_{s})(\frac{x_{1}x_{2}\dots x_{n}}{y_{1}y_{2}\dots y_{n}})</script>。</p><p>举例说明，设 <code>x = 0.1011</code>，<code>y = 0.1101</code>,模仿十进制除法运算求商，其过程如下：<br><img src="http://resource.dynamicfire.cn/blog/division-signed-1.png" alt=""></p><script type="math/tex; mode=display">\because Z_{s}=x_{s}\oplus y_{s}=0\oplus 0=0</script><script type="math/tex; mode=display">\therefore x\div y = 0.1101+\frac{0.0111\times 2^{-4}}{0.1101}</script>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown语法速查手册</title>
      <link href="/2018/markdown/"/>
      <url>/2018/markdown/</url>
      <content type="html"><![CDATA[<p><em>本文转载自<a href="http://www.domuse.com/markdown-and-latex-equation-handbook.html" target="_blank" rel="noopener">《Markdown语法和LaTeX数学记号速查手册》by Leon</a>， 略作修改，依照<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh" target="_blank" rel="noopener">CC BY-SA 4.0</a>发布。</em></p><p>这篇文章是Markdown的速查手册。常用的Markdown语法列举在文中。如果读者需要用到高级的技巧，请直接参考其他资料。</p><h2 id="Markdown极简手册"><a href="#Markdown极简手册" class="headerlink" title="Markdown极简手册"></a>Markdown极简手册</h2><p>Markdown是语法简单、易于书写的标记语言，其支持HTML，直接插入标签即可。Markdown中实现某种功能可能有不止一种语法，这里一般只演示一种。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Atx形式的语法（另一种为Setex）：在行首插入1-6个#，如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> H1标题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## H3标题</span></span></span><br></pre></td></tr></table></figure></p><p>行尾可以加上同等数量的<code>#</code>，仅仅是为了美观。</p><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>文本行前后有一个以上的空行即可。</p><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><p>在每行前加&gt;即可，更简单的方式是只在段落首行添加&gt;。允许嵌套，根据层次使用不同数量的&gt;即可，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Level 1.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Level 2.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Back to Level 1.</span></span><br></pre></td></tr></table></figure></p><p>引用区块内允许其他Markdown语法，如标题、代码块等。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表在行首使用<code>*</code>、<code>+</code>、<code>-</code>中的一种，有序列表使用数字加一个英文句点。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Python</span><br><span class="line"><span class="bullet">* </span>C++</span><br><span class="line"><span class="bullet">* </span>Java</span><br><span class="line"><span class="bullet">1. </span>文本1</span><br><span class="line"><span class="bullet">2. </span>文本2</span><br><span class="line"><span class="bullet">3. </span>文本3</span><br></pre></td></tr></table></figure></p><p>列表项目可以包含多个段落，中间空行，且段落首行应缩进一次。如果段落中包含代码块，额外缩进一次。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>使用<code>*</code>或<code>_</code>包围的字体或显示成斜体，用两个<code>*</code>或<code>_</code>包围则加粗。（中文字体不建议使用斜体，易读性降低）</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>全部缩进一次（4个空格或1个Tab）即可。代码块的Markdown语法不会被转换。</p><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>如果要标记一小段行内代码，可以使用反引号抱起来<code>()</code></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一条分割线，中间允许空格存在<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br></pre></td></tr></table></figure></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接文字放入方括号中，链接地址放入圆括号中，允许相对路径。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个[<span class="string">例子</span>](<span class="link">http://example.com/</span>)</span><br></pre></td></tr></table></figure></p><p>或者使用参考式链接：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">例子</span>][<span class="symbol">id</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/</span></span><br></pre></td></tr></table></figure></p><p>如果希望链接在浏览器的新标签页中打开，只需要添加<code>{:target=&quot;_blank&quot;}</code>在圆括号后即可。</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>同链接一样，同样有行内式和参考式来标记图片：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</span><br></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Alt text</span>][<span class="symbol">id</span>]</span><br></pre></td></tr></table></figure></p><p>然后在某处指明图片参考名称<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">id</span>]: <span class="link">url/to/image.jpg</span></span><br></pre></td></tr></table></figure></p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>用尖括号包围的网址转换成链接地址和链接文字一样的自动链接，适用于短的网址，如：<code>http://www.domuse.com</code></p><h3 id="中文缩进·空格"><a href="#中文缩进·空格" class="headerlink" title="中文缩进·空格"></a>中文缩进·空格</h3><p>如果写中文想在段首缩进两个空格，在前面直接加全放大的空格两个<code>&amp;emsp;&amp;emsp;</code>，半方大的空格<code>&amp;ensp;</code></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>|</code>控制分列，<code>-</code>控制分行，<code>:</code>控制对齐方式。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| Tables        |</span> Are           <span class="params">| Cool  |</span></span><br><span class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></span><br><span class="line"><span class="params">| col 3 is      |</span> right-aligned <span class="params">| $1600 |</span></span><br><span class="line"><span class="params">| col 2 is      |</span> centered      <span class="params">|   $12 |</span></span><br><span class="line"><span class="params">| zebra stripes |</span> are neat      <span class="params">|    $1 |</span></span><br></pre></td></tr></table></figure></p><p>显示效果：</p><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div>]]></content>
      
      <categories>
          
          <category> 写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>补码一位乘法</title>
      <link href="/2018/booth&#39;s-alg/"/>
      <url>/2018/booth&#39;s-alg/</url>
      <content type="html"><![CDATA[<p><em>本文简述了计算机中的补码一位乘法。文中没有涉及到高深的数学知识。</em></p><p>在原码乘法中，符号位不能参加运算，需要用单独的一个异或门产生乘积的符号位。这样一来电路就变得更加复杂。因此，将补码引入乘法计算可以让电路简化并降低成本。Booth算法（Booth’s multiplication algorithm）是计算机中一种利用补码来计算乘法的算法。通过该算法可以实现符号位直接参加运算。</p><p>在定点计算机系统中，两个补码相乘（Booth算法）<script type="math/tex">x\times y = z</script>的运算规则如下：</p><ol><li>x取双符号，部分积设为0，y取单符号位。</li><li>y最低位先增加一个附加位0，之后每次讨论的y最后两位是判断位。部分积每次右移一位。</li><li>判断y的最后两位的时候，遵循这样的规则：</li></ol><ul><li>为<code>00</code>或<code>11</code>时，直接右移一位；</li><li>为<code>01</code>时，加<code>[x]补</code>，然后右移一位；</li><li>为<code>10</code>时，加<code>[-x]补</code>，然后右移一位；</li><li>最后一步运算不用右移。</li></ul><p>举例说明，设 <code>x = -0.1101</code>，<code>y = 0.1011</code>,用Booth算法求乘积，其过程如下：</p><ol><li><p>写出x、-x的补码：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[x]</span>补 = <span class="number">11</span>.<span class="number">0011</span></span><br><span class="line"><span class="string">[-x]</span>补 = <span class="number">00</span>.<span class="number">1101</span></span><br></pre></td></tr></table></figure></li><li><p>设部分积的初值为<code>00.0000</code></p></li><li>在y最低位增加一个附加位0，此时<code>y = 0.10110</code></li><li><p><code>0.10110</code>当前最后两位判断位是<code>10</code>，所以加上<code>[-x]补</code>：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00.0000</span> + <span class="number">00.1101</span> = <span class="number">00.1101</span></span><br></pre></td></tr></table></figure></li><li><p><code>00.1101</code>右移一位变成<code>00.01101</code></p></li><li>此时，判断位往前挪了一个位置<code>y = 0.10110</code>的判断位为<code>11</code>，直接右移一位，部分积就变成了<code>00.001101</code></li><li><p><code>y = 0.10110</code>的判断位变成了<code>01</code>，加<code>[x]补</code>：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00.001101</span> + <span class="number">11.0011</span> = <span class="number">11.011001</span></span><br></pre></td></tr></table></figure></li><li><p>右移一位，变成了<code>11.1011001</code></p></li><li><p>此时<code>y = 0.10110</code>的判断位变成了<code>10</code>，加上<code>[-x]补</code>：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11.1011001</span> + <span class="number">00.1101</span> = <span class="number">00.1000001</span></span><br></pre></td></tr></table></figure></li><li><p><code>00.1000001</code>右移一位变成了<code>00.01000001</code></p></li><li><p>此时<code>y = 0.10110</code>的判断位变成了<code>01</code>，加<code>[x]补</code>：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00.01000001</span> + <span class="number">11.0011</span> = <span class="number">11.01110001</span></span><br></pre></td></tr></table></figure></li><li><p>最后一步不用右移，最后结果就是<code>1.01110001</code></p></li></ol><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>考虑一个由若干个0包围着若干个1的正的二进制乘数，比如<code>00111110</code>，积可以表达为：<br>$M\times 00111110 =M\times (2^{5}+2^{4}+2^{3}+2^{2}+2^{1})=M\times 62$<br>其中，M代表被乘数。变形为下式可以使运算次数可以减为两次：<br>$M\times (010000-10) =M\times (2^{6}-2^{1})=M\times 62$<br>事实上，任何二进制数中连续的1可以被分解为两个二进制数之差：</p><script type="math/tex; mode=display">({\dots \overbrace{10 \dots 10}^{n\mbox{个}} \dots})_{2} \equiv ({\dots \overbrace{10 \dots 00}^{n\mbox{个}} \dots})_{2} - ({\dots \overbrace{00 \dots 10}^{n\mbox{个}} \dots})_{2}</script><p>因此，我们可以用更简单的运算来替换原数中连续为1的数字的乘法，通过加上乘数，对部分积进行移位运算，最后再将之从乘数中减去。它利用了我们在针对为零的位做乘法时，不需要做其他运算，只需移位这一特点，这很像我们在做和99的乘法时利用<script type="math/tex">99 = 100 − 1</script>这一性质。这种模式可以扩展应用于任何一串数字中连续为1的部分（包括只有一个1的情况）。那么，<br>$M\times 00111010 =M\times (2^{5}+2^{4}+2^{3}+2^{1})=M\times 58$<br>$M\times (0100-1010) =M\times (2^{6}-2^{3}+2^{1})=M\times 58$<br>布斯算法遵从这种模式，它在遇到一串数字中的第一组从0到1的变化时（即遇到01时）执行加法，在遇到这一串连续1的尾部时（即遇到10时）执行减法。这在乘数为负时同样有效。当乘数中的连续1比较多时（形成比较长的1串时），布斯算法较一般的乘法算法执行的加减法运算少。<br><em><a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E6%96%AF%E4%B9%98%E6%B3%95%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Wikipedia</a></em></p>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原码一位乘法</title>
      <link href="/2018/multi-signed/"/>
      <url>/2018/multi-signed/</url>
      <content type="html"><![CDATA[<p><em>本文简述了计算机中的原码一位乘法。文中没有涉及到高深的数学知识。</em></p><p>人们通过数字前的“−”符号来表示一个负数。而在计算机硬件中，数字都以无符号的二进制形式表示，因此需要一种编码负号的方法。在之前的<em><a href="/2018/binary/">计算机内数值的表示</a></em>一文中我简单介绍了三种方法来表示有符号数：原码（sign-and-magnitude）、反码（ones’ complement）和补码（two’s complement）。另外还有移码（excess-N）的表示方法。</p><p>在定点计算机系统中，两个原码相乘<script type="math/tex">x\times y = z</script>的运算规则如下：</p><ol><li>z的符号位通过x和y的符号位进行异或运算得到；</li><li>z除了符号之外的其他部分由x的绝对值乘以y的绝对值得到。</li></ol><p>即被乘数和乘数均取绝对值参加运算，符号位单独考虑：</p><p>乘积 <script type="math/tex">p = |x| \times |y|</script><br>符号 <script type="math/tex">p_{s} = |x|_{s} \oplus |y|_{s}</script></p><p>举例说明，设 <code>x = 0.1101</code>，<code>y = 0.1011</code>,用手算求乘积，其过程如下：<br><img src="http://resource.dynamicfire.cn/blog/multi-signed-1.png" alt=""></p><p>这种算法过于消耗计算机资源，下面说明在计算机中的计算过程：</p><ol><li>将部分积设为0，并把长度扩展到和x相同，即<code>00.0000</code></li><li>因y的最后一位是1，所以要加上x的绝对值：<code>00.0000 + 00.1101 = 00.1101</code></li><li>将部分积右移1位，前面补0，即<code>00.01101</code></li><li>因y的倒数第二位是1，加x的绝对值：<code>00.01101 + 00.1101 = 01.00111</code></li><li>把<code>01.00111</code>右移1位，前面补0，即<code>00.100111</code></li><li>y倒数第3位是0，只要加0，所以还是：<code>00.100111</code></li><li><code>00.100111</code>右移一位，即<code>00.0100111</code></li><li>y第一位是1，加上x的绝对值：<code>00.0100111 + 00.1101 = 01.0001111</code></li><li><code>01.0001111</code>右移一位，即<code>00.10001111</code><br>所以最后结果为<code>0.10001111</code>。</li></ol>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机内数值的表示</title>
      <link href="/2018/binary/"/>
      <url>/2018/binary/</url>
      <content type="html"><![CDATA[<p><em>本文简述了计算机的原码、反码和补码的基本概念及它们之间的联系。文中没有涉及到高深的数学知识。</em></p><h2 id="1-机器数及真值"><a href="#1-机器数及真值" class="headerlink" title="1. 机器数及真值"></a>1. 机器数及真值</h2><p>众所周知，在计算机内数值是以二进制形式储存使用的，数字在计算机中的二进制表示形式被称作 <strong>机器数</strong>。机器数有两大特点，一是符号数值化，二是大小受机器字长的限制。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为0，负数为1。数的形式值（机器数）不等于真正的数值，机器数对应的数值称为机器数的真值。 </p><p>假设计算机字长为8位：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十进制数 +<span class="number">7</span> 转换成二进制就是  <span class="number">00000111</span>（真值）其机器数为 <span class="number">00000111</span></span><br><span class="line">十进制数 <span class="number">-7</span> 转换成二进制就是 <span class="number">-00000111</span>（真值）其机器数为 <span class="number">10000111</span></span><br></pre></td></tr></table></figure></p><h2 id="2-机器数的三种形式"><a href="#2-机器数的三种形式" class="headerlink" title="2. 机器数的三种形式"></a>2. 机器数的三种形式</h2><p>机器数有原码、反码和补码三种表示形式。</p><h3 id="2-1-原码"><a href="#2-1-原码" class="headerlink" title="2.1 原码"></a>2.1 原码</h3><p>原码是人脑最容易理解和计算的编码方式（对于计算机并不是），是符号位加上真值的绝对值，即第一位为符号位，其余位表示值。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十进制数+<span class="number">1</span>原码为 <span class="number">00000001</span></span><br><span class="line">十进制数<span class="number">-1</span>原码为 <span class="number">10000001</span></span><br></pre></td></tr></table></figure></p><p>因为第一位是符号位，所以8位二进制的取值范围为：<br><code>[11111111,01111111]</code>即<code>[-127,127]</code>。</p><p>无符号数（正数）用原码。</p><p>原码对于对于计算机来说并不好处理：</p><p><script type="math/tex">(+1)_{10}</script>和<script type="math/tex">(-1)_{10}</script>相加为0，但计算机只能算出<script type="math/tex">(0001)_{2}</script>+<script type="math/tex">(1001)_{2}</script>=<script type="math/tex">(1010)_{2}</script>=<script type="math/tex">(-2)_{10}</script>。</p><p>因此人们在原码的基础上引入了反码和补码。</p><h3 id="2-2-反码"><a href="#2-2-反码" class="headerlink" title="2.2 反码"></a>2.2 反码</h3><p>正数的反码与原码相同，负数的反码是符号位不变，数值位逐位取反。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[+1]</span> = <span class="string">[00000001]</span>原 = <span class="string">[00000001]</span>反</span><br><span class="line"><span class="string">[-1]</span> = <span class="string">[10000001]</span>原 = <span class="string">[11111110]</span>反</span><br></pre></td></tr></table></figure></p><p>值得注意的是，0的反码有两个，<code>[+0]=[00000000]反</code>和<code>[-0]=[11111111]反</code>。</p><h3 id="2-3-补码"><a href="#2-3-补码" class="headerlink" title="2.3 补码"></a>2.3 补码</h3><p>正数的补码与原码相同，负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1(即在反码的基础上+1)。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[+1]</span> = <span class="string">[00000001]</span>原 = <span class="string">[00000001]</span>反 = <span class="string">[00000001]</span>补</span><br><span class="line"><span class="string">[-1]</span> = <span class="string">[10000001]</span>原 = <span class="string">[11111110]</span>反 = <span class="string">[11111111]</span>补</span><br></pre></td></tr></table></figure></p><p>0的补码只有一种形式。</p><h2 id="3-为何要用补码？"><a href="#3-为何要用补码？" class="headerlink" title="3. 为何要用补码？"></a>3. 为何要用补码？</h2><p>由上可知计算在涉及负数时，若机器码采用原码来计算，其结果显然是错误的。因此人们在原码的基础上发明了反码。</p><p>例如，<code>1 + (-1) = [00000001]反 + [11111110]反 = [11111111]反 = [10000000]原 = -0</code></p><p>然而这又出现了一个新问题，0的在反码中没有唯一性：有<code>[00000000]</code>和<code>[10000000]</code>两个编码分别表示+0和-0。</p><p>所以又引入了补码的概念，例如：<br><code>1 + (-1) = [00000001]原 + [10000001]原 = [00000001]补 + [11111111]补 = [00000000]补 = [00000000]原 = 0</code></p><p>在补码中，0只表示为<code>[00000000]</code>，而多出的<code>[10000000]</code>表示-128。因此在8位字长系统中，补码的取值范围是<code>[-128，127]</code>。以此类推，编程中32位int类型的范围是<script type="math/tex">[-2^{31}, 2^{31}-1]</script>。</p>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
