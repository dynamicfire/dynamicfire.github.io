<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aerial&#39;s log</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aerial.ac.cn/"/>
  <updated>2018-04-15T11:32:09.210Z</updated>
  <id>https://aerial.ac.cn/</id>
  
  <author>
    <name>Aerial</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>补码一位乘法</title>
    <link href="https://aerial.ac.cn/2018/04/15/booth&#39;s%20alg/"/>
    <id>https://aerial.ac.cn/2018/04/15/booth&#39;s alg/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-04-15T11:32:09.210Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文简述了计算机中的补码一位乘法。文中没有涉及到高深的数学知识。</em></p><p>在原码乘法中，符号位不能参加运算，需要用单独的一个异或门产生乘积的符号位。这样一来电路就变得更加复杂。因此，将补码引入乘法计算可以让电路简化并降低成本。Booth算法（Booth’s multiplication algorithm）是计算机中一种利用补码来计算乘法的算法。通过该算法可以实现符号位直接参加运算。</p><p>在定点计算机系统中，两个补码相乘（Booth算法）<script type="math/tex">x\times y = z</script>的运算规则如下：</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本文简述了计算机中的补码一位乘法。文中没有涉及到高深的数学知识。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在原码乘法中，符号位不能参加运算，需要用单独的一个异或门产生乘积的符号位。这样一来电路就变得更加复杂。因此，将补码引入乘法计算可以让电路简化并降低成本。Booth算法（Boot
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://aerial.ac.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机原理" scheme="https://aerial.ac.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="二进制" scheme="https://aerial.ac.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>原码一位乘法</title>
    <link href="https://aerial.ac.cn/2018/04/15/multi%20signed/"/>
    <id>https://aerial.ac.cn/2018/04/15/multi signed/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-04-15T11:03:27.362Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文简述了计算机中的原码一位乘法。文中没有涉及到高深的数学知识。</em></p><p>人们通过数字前的“−”符号来表示一个负数。而在计算机硬件中，数字都以无符号的二进制形式表示，因此需要一种编码负号的方法。在之前的<em><a href="/2018/04/12/binary/">计算机内数值的表示</a></em>一文中我简单介绍了三种方法来表示有符号数：原码（sign-and-magnitude）、反码（ones’ complement）和补码（two’s complement）。另外还有移码（excess-N）的表示方法。</p><p>在定点计算机系统中，两个原码相乘<script type="math/tex">x\times y = z</script>的运算规则如下：</p><ol><li>z的符号位通过x和y的符号位进行异或运算得到；</li><li>z除了符号之外的其他部分由x的绝对值乘以y的绝对值得到。</li></ol><p>即被乘数和乘数均取绝对值参加运算，符号位单独考虑：</p><p>乘积 <script type="math/tex">p = |x| \times |y|</script><br>符号 <script type="math/tex">p_{s} = |x|_{s} \oplus |y|_{s}</script></p><p>举例说明，设 <code>x = 0.1101</code>，<code>y = 0.1011</code>,用手算求乘积，其过程如下：<br><img src="http://resource.dynamicfire.cn/blog/multi-signed-1.png" alt=""></p><p>这种算法过于消耗计算机资源，下面说明在计算机中的计算过程：</p><ol><li>将部分积设为0，并把长度扩展到和x相同，即<code>00.0000</code></li><li>因y的最后一位是1，所以要加上x的绝对值：<code>00.0000 + 00.1101 = 00.1101</code></li><li>将部分积右移1位，前面补0，即<code>00.01101</code></li><li>因y的倒数第二位是1，加x的绝对值：<code>00.01101 + 00.1101 = 01.00111</code></li><li>把<code>01.00111</code>右移1位，前面补0，即<code>00.100111</code></li><li>y倒数第3位是0，只要加0，所以还是：<code>00.100111</code></li><li><code>00.100111</code>右移一位，即<code>00.0100111</code></li><li>y第一位是1，加上x的绝对值：<code>00.0100111 + 00.1101 = 01.0001111</code></li><li><code>01.0001111</code>右移一位，即<code>00.10001111</code><br>所以最后结果为<code>0.10001111</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本文简述了计算机中的原码一位乘法。文中没有涉及到高深的数学知识。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;人们通过数字前的“−”符号来表示一个负数。而在计算机硬件中，数字都以无符号的二进制形式表示，因此需要一种编码负号的方法。在之前的&lt;em&gt;&lt;a href=&quot;/2018/04/12
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://aerial.ac.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机原理" scheme="https://aerial.ac.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="二进制" scheme="https://aerial.ac.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>计算机内数值的表示</title>
    <link href="https://aerial.ac.cn/2018/04/12/binary/"/>
    <id>https://aerial.ac.cn/2018/04/12/binary/</id>
    <published>2018-04-11T16:00:00.000Z</published>
    <updated>2018-04-15T08:17:47.422Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文简述了计算机的原码、反码和补码的基本概念及它们之间的联系。文中没有涉及到高深的数学知识。</em></p><h2 id="1-机器数及真值"><a href="#1-机器数及真值" class="headerlink" title="1. 机器数及真值"></a>1. 机器数及真值</h2><p>众所周知，在计算机内数值是以二进制形式储存使用的，数字在计算机中的二进制表示形式被称作 <strong>机器数</strong>。机器数有两大特点，一是符号数值化，二是大小受机器字长的限制。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为0，负数为1。数的形式值（机器数）不等于真正的数值，机器数对应的数值称为机器数的真值。 </p><p>假设计算机字长为8位：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十进制数 +<span class="number">7</span> 转换成二进制就是  <span class="number">00000111</span>（真值）其机器数为 <span class="number">00000111</span></span><br><span class="line">十进制数 <span class="number">-7</span> 转换成二进制就是 <span class="number">-00000111</span>（真值）其机器数为 <span class="number">10000111</span></span><br></pre></td></tr></table></figure></p><h2 id="2-机器数的三种形式"><a href="#2-机器数的三种形式" class="headerlink" title="2. 机器数的三种形式"></a>2. 机器数的三种形式</h2><p>机器数有原码、反码和补码三种表示形式。</p><h3 id="2-1-原码"><a href="#2-1-原码" class="headerlink" title="2.1 原码"></a>2.1 原码</h3><p>原码是人脑最容易理解和计算的编码方式（对于计算机并不是），是符号位加上真值的绝对值，即第一位为符号位，其余位表示值。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十进制数+<span class="number">1</span>原码为 <span class="number">00000001</span></span><br><span class="line">十进制数<span class="number">-1</span>原码为 <span class="number">10000001</span></span><br></pre></td></tr></table></figure></p><p>因为第一位是符号位，所以8位二进制的取值范围为：<br><code>[11111111,01111111]</code>即<code>[-127,127]</code>。</p><p>无符号数（正数）用原码。</p><p>原码对于对于计算机来说并不好处理：</p><p><script type="math/tex">(+1)_{10}</script>和<script type="math/tex">(-1)_{10}</script>相加为0，但计算机只能算出<script type="math/tex">(0001)_{2}</script>+<script type="math/tex">(1001)_{2}</script>=<script type="math/tex">(1010)_{2}</script>=<script type="math/tex">(-2)_{10}</script>。</p><p>因此人们在原码的基础上引入了反码和补码。</p><h3 id="2-2-反码"><a href="#2-2-反码" class="headerlink" title="2.2 反码"></a>2.2 反码</h3><p>正数的反码与原码相同，负数的反码是符号位不变，数值位逐位取反。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[+1]</span> = <span class="string">[00000001]</span>原 = <span class="string">[00000001]</span>反</span><br><span class="line"><span class="string">[-1]</span> = <span class="string">[10000001]</span>原 = <span class="string">[11111110]</span>反</span><br></pre></td></tr></table></figure></p><p>值得注意的是，0的反码有两个，<code>[+0]=[00000000]反</code>和<code>[-0]=[11111111]反</code>。</p><h3 id="2-3-补码"><a href="#2-3-补码" class="headerlink" title="2.3 补码"></a>2.3 补码</h3><p>正数的补码与原码相同，负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1(即在反码的基础上+1)。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[+1]</span> = <span class="string">[00000001]</span>原 = <span class="string">[00000001]</span>反 = <span class="string">[00000001]</span>补</span><br><span class="line"><span class="string">[-1]</span> = <span class="string">[10000001]</span>原 = <span class="string">[11111110]</span>反 = <span class="string">[11111111]</span>补</span><br></pre></td></tr></table></figure></p><p>0的补码只有一种形式。</p><h2 id="3-为何要用补码？"><a href="#3-为何要用补码？" class="headerlink" title="3. 为何要用补码？"></a>3. 为何要用补码？</h2><p>由上可知计算在涉及负数时，若机器码采用原码来计算，其结果显然是错误的。因此人们在原码的基础上发明了反码。</p><p>例如，<code>1 + (-1) = [00000001]反 + [11111110]反 = [11111111]反 = [10000000]原 = -0</code></p><p>然而这又出现了一个新问题，0的在反码中没有唯一性：有<code>[00000000]</code>和<code>[10000000]</code>两个编码分别表示+0和-0。</p><p>所以又引入了补码的概念，例如：<br><code>1 + (-1) = [00000001]原 + [10000001]原 = [00000001]补 + [11111111]补 = [00000000]补 = [00000000]原 = 0</code></p><p>在补码中，0只表示为<code>[00000000]</code>，而多出的<code>[10000000]</code>表示-128。因此在8位字长系统中，补码的取值范围是<code>[-128，127]</code>。以此类推，编程中32位int类型的范围是<script type="math/tex">[-2^{31}, 2^{31}-1]</script>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本文简述了计算机的原码、反码和补码的基本概念及它们之间的联系。文中没有涉及到高深的数学知识。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-机器数及真值&quot;&gt;&lt;a href=&quot;#1-机器数及真值&quot; class=&quot;headerlink&quot; title=&quot;1. 机器数及真值&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="计算机基础" scheme="https://aerial.ac.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机原理" scheme="https://aerial.ac.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
      <category term="二进制" scheme="https://aerial.ac.cn/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
</feed>
